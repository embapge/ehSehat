// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v6.31.1
// source: proto/clinic_data.proto

package clinicdatapb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ClinicDataService_CreatePatient_FullMethodName               = "/clinicdata.ClinicDataService/CreatePatient"
	ClinicDataService_GetPatientByID_FullMethodName              = "/clinicdata.ClinicDataService/GetPatientByID"
	ClinicDataService_GetAllPatients_FullMethodName              = "/clinicdata.ClinicDataService/GetAllPatients"
	ClinicDataService_UpdatePatient_FullMethodName               = "/clinicdata.ClinicDataService/UpdatePatient"
	ClinicDataService_DeletePatient_FullMethodName               = "/clinicdata.ClinicDataService/DeletePatient"
	ClinicDataService_CreateDoctor_FullMethodName                = "/clinicdata.ClinicDataService/CreateDoctor"
	ClinicDataService_GetDoctorByID_FullMethodName               = "/clinicdata.ClinicDataService/GetDoctorByID"
	ClinicDataService_GetAllDoctors_FullMethodName               = "/clinicdata.ClinicDataService/GetAllDoctors"
	ClinicDataService_UpdateDoctor_FullMethodName                = "/clinicdata.ClinicDataService/UpdateDoctor"
	ClinicDataService_DeleteDoctor_FullMethodName                = "/clinicdata.ClinicDataService/DeleteDoctor"
	ClinicDataService_CreateSpecialization_FullMethodName        = "/clinicdata.ClinicDataService/CreateSpecialization"
	ClinicDataService_GetSpecializationByID_FullMethodName       = "/clinicdata.ClinicDataService/GetSpecializationByID"
	ClinicDataService_GetAllSpecializations_FullMethodName       = "/clinicdata.ClinicDataService/GetAllSpecializations"
	ClinicDataService_UpdateSpecialization_FullMethodName        = "/clinicdata.ClinicDataService/UpdateSpecialization"
	ClinicDataService_DeleteSpecialization_FullMethodName        = "/clinicdata.ClinicDataService/DeleteSpecialization"
	ClinicDataService_CreateRoom_FullMethodName                  = "/clinicdata.ClinicDataService/CreateRoom"
	ClinicDataService_GetRoomByID_FullMethodName                 = "/clinicdata.ClinicDataService/GetRoomByID"
	ClinicDataService_GetAllRooms_FullMethodName                 = "/clinicdata.ClinicDataService/GetAllRooms"
	ClinicDataService_CreateScheduleFixed_FullMethodName         = "/clinicdata.ClinicDataService/CreateScheduleFixed"
	ClinicDataService_GetFixedSchedulesByDoctorID_FullMethodName = "/clinicdata.ClinicDataService/GetFixedSchedulesByDoctorID"
	ClinicDataService_UpdateScheduleFixed_FullMethodName         = "/clinicdata.ClinicDataService/UpdateScheduleFixed"
	ClinicDataService_CreateScheduleOverride_FullMethodName      = "/clinicdata.ClinicDataService/CreateScheduleOverride"
	ClinicDataService_GetOverrideByDoctorID_FullMethodName       = "/clinicdata.ClinicDataService/GetOverrideByDoctorID"
	ClinicDataService_UpdateScheduleOverride_FullMethodName      = "/clinicdata.ClinicDataService/UpdateScheduleOverride"
	ClinicDataService_DeleteScheduleOverride_FullMethodName      = "/clinicdata.ClinicDataService/DeleteScheduleOverride"
)

// ClinicDataServiceClient is the client API for ClinicDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClinicDataServiceClient interface {
	// PATIENT
	CreatePatient(ctx context.Context, in *CreatePatientRequest, opts ...grpc.CallOption) (*Patient, error)
	GetPatientByID(ctx context.Context, in *GetPatientByIDRequest, opts ...grpc.CallOption) (*Patient, error)
	GetAllPatients(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListPatientsResponse, error)
	UpdatePatient(ctx context.Context, in *UpdatePatientRequest, opts ...grpc.CallOption) (*UpdatePatientResponse, error)
	DeletePatient(ctx context.Context, in *DeletePatientRequest, opts ...grpc.CallOption) (*DeletePatientResponse, error)
	// DOCTOR
	CreateDoctor(ctx context.Context, in *CreateDoctorRequest, opts ...grpc.CallOption) (*Doctor, error)
	GetDoctorByID(ctx context.Context, in *GetDoctorByIDRequest, opts ...grpc.CallOption) (*Doctor, error)
	GetAllDoctors(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListDoctorsResponse, error)
	UpdateDoctor(ctx context.Context, in *UpdateDoctorRequest, opts ...grpc.CallOption) (*UpdateDoctorResponse, error)
	DeleteDoctor(ctx context.Context, in *DeleteDoctorRequest, opts ...grpc.CallOption) (*DeleteDoctorResponse, error)
	// SPECIALIZATION
	CreateSpecialization(ctx context.Context, in *CreateSpecializationRequest, opts ...grpc.CallOption) (*Specialization, error)
	GetSpecializationByID(ctx context.Context, in *GetSpecializationByIDRequest, opts ...grpc.CallOption) (*Specialization, error)
	GetAllSpecializations(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListSpecializationsResponse, error)
	UpdateSpecialization(ctx context.Context, in *UpdateSpecializationRequest, opts ...grpc.CallOption) (*UpdateSpecializationResponse, error)
	DeleteSpecialization(ctx context.Context, in *DeleteSpecializationRequest, opts ...grpc.CallOption) (*DeleteSpecializationResponse, error)
	// ROOM
	CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*Room, error)
	GetRoomByID(ctx context.Context, in *GetRoomByIDRequest, opts ...grpc.CallOption) (*Room, error)
	GetAllRooms(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListRoomsResponse, error)
	// SCHEDULE FIXED
	CreateScheduleFixed(ctx context.Context, in *CreateScheduleFixedRequest, opts ...grpc.CallOption) (*ScheduleFixed, error)
	GetFixedSchedulesByDoctorID(ctx context.Context, in *GetFixedSchedulesByDoctorIDRequest, opts ...grpc.CallOption) (*ListScheduleFixedResponse, error)
	UpdateScheduleFixed(ctx context.Context, in *UpdateScheduleFixedRequest, opts ...grpc.CallOption) (*ScheduleFixed, error)
	// SCHEDULE OVERRIDE
	CreateScheduleOverride(ctx context.Context, in *CreateScheduleOverrideRequest, opts ...grpc.CallOption) (*ScheduleOverride, error)
	GetOverrideByDoctorID(ctx context.Context, in *GetOverrideByDoctorIDRequest, opts ...grpc.CallOption) (*ListScheduleOverrideResponse, error)
	UpdateScheduleOverride(ctx context.Context, in *UpdateScheduleOverrideRequest, opts ...grpc.CallOption) (*UpdateScheduleOverrideResponse, error)
	DeleteScheduleOverride(ctx context.Context, in *DeleteScheduleOverrideRequest, opts ...grpc.CallOption) (*DeleteScheduleOverrideResponse, error)
}

type clinicDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClinicDataServiceClient(cc grpc.ClientConnInterface) ClinicDataServiceClient {
	return &clinicDataServiceClient{cc}
}

func (c *clinicDataServiceClient) CreatePatient(ctx context.Context, in *CreatePatientRequest, opts ...grpc.CallOption) (*Patient, error) {
	out := new(Patient)
	err := c.cc.Invoke(ctx, ClinicDataService_CreatePatient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clinicDataServiceClient) GetPatientByID(ctx context.Context, in *GetPatientByIDRequest, opts ...grpc.CallOption) (*Patient, error) {
	out := new(Patient)
	err := c.cc.Invoke(ctx, ClinicDataService_GetPatientByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clinicDataServiceClient) GetAllPatients(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListPatientsResponse, error) {
	out := new(ListPatientsResponse)
	err := c.cc.Invoke(ctx, ClinicDataService_GetAllPatients_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clinicDataServiceClient) UpdatePatient(ctx context.Context, in *UpdatePatientRequest, opts ...grpc.CallOption) (*UpdatePatientResponse, error) {
	out := new(UpdatePatientResponse)
	err := c.cc.Invoke(ctx, ClinicDataService_UpdatePatient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clinicDataServiceClient) DeletePatient(ctx context.Context, in *DeletePatientRequest, opts ...grpc.CallOption) (*DeletePatientResponse, error) {
	out := new(DeletePatientResponse)
	err := c.cc.Invoke(ctx, ClinicDataService_DeletePatient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clinicDataServiceClient) CreateDoctor(ctx context.Context, in *CreateDoctorRequest, opts ...grpc.CallOption) (*Doctor, error) {
	out := new(Doctor)
	err := c.cc.Invoke(ctx, ClinicDataService_CreateDoctor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clinicDataServiceClient) GetDoctorByID(ctx context.Context, in *GetDoctorByIDRequest, opts ...grpc.CallOption) (*Doctor, error) {
	out := new(Doctor)
	err := c.cc.Invoke(ctx, ClinicDataService_GetDoctorByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clinicDataServiceClient) GetAllDoctors(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListDoctorsResponse, error) {
	out := new(ListDoctorsResponse)
	err := c.cc.Invoke(ctx, ClinicDataService_GetAllDoctors_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clinicDataServiceClient) UpdateDoctor(ctx context.Context, in *UpdateDoctorRequest, opts ...grpc.CallOption) (*UpdateDoctorResponse, error) {
	out := new(UpdateDoctorResponse)
	err := c.cc.Invoke(ctx, ClinicDataService_UpdateDoctor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clinicDataServiceClient) DeleteDoctor(ctx context.Context, in *DeleteDoctorRequest, opts ...grpc.CallOption) (*DeleteDoctorResponse, error) {
	out := new(DeleteDoctorResponse)
	err := c.cc.Invoke(ctx, ClinicDataService_DeleteDoctor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clinicDataServiceClient) CreateSpecialization(ctx context.Context, in *CreateSpecializationRequest, opts ...grpc.CallOption) (*Specialization, error) {
	out := new(Specialization)
	err := c.cc.Invoke(ctx, ClinicDataService_CreateSpecialization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clinicDataServiceClient) GetSpecializationByID(ctx context.Context, in *GetSpecializationByIDRequest, opts ...grpc.CallOption) (*Specialization, error) {
	out := new(Specialization)
	err := c.cc.Invoke(ctx, ClinicDataService_GetSpecializationByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clinicDataServiceClient) GetAllSpecializations(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListSpecializationsResponse, error) {
	out := new(ListSpecializationsResponse)
	err := c.cc.Invoke(ctx, ClinicDataService_GetAllSpecializations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clinicDataServiceClient) UpdateSpecialization(ctx context.Context, in *UpdateSpecializationRequest, opts ...grpc.CallOption) (*UpdateSpecializationResponse, error) {
	out := new(UpdateSpecializationResponse)
	err := c.cc.Invoke(ctx, ClinicDataService_UpdateSpecialization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clinicDataServiceClient) DeleteSpecialization(ctx context.Context, in *DeleteSpecializationRequest, opts ...grpc.CallOption) (*DeleteSpecializationResponse, error) {
	out := new(DeleteSpecializationResponse)
	err := c.cc.Invoke(ctx, ClinicDataService_DeleteSpecialization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clinicDataServiceClient) CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*Room, error) {
	out := new(Room)
	err := c.cc.Invoke(ctx, ClinicDataService_CreateRoom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clinicDataServiceClient) GetRoomByID(ctx context.Context, in *GetRoomByIDRequest, opts ...grpc.CallOption) (*Room, error) {
	out := new(Room)
	err := c.cc.Invoke(ctx, ClinicDataService_GetRoomByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clinicDataServiceClient) GetAllRooms(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListRoomsResponse, error) {
	out := new(ListRoomsResponse)
	err := c.cc.Invoke(ctx, ClinicDataService_GetAllRooms_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clinicDataServiceClient) CreateScheduleFixed(ctx context.Context, in *CreateScheduleFixedRequest, opts ...grpc.CallOption) (*ScheduleFixed, error) {
	out := new(ScheduleFixed)
	err := c.cc.Invoke(ctx, ClinicDataService_CreateScheduleFixed_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clinicDataServiceClient) GetFixedSchedulesByDoctorID(ctx context.Context, in *GetFixedSchedulesByDoctorIDRequest, opts ...grpc.CallOption) (*ListScheduleFixedResponse, error) {
	out := new(ListScheduleFixedResponse)
	err := c.cc.Invoke(ctx, ClinicDataService_GetFixedSchedulesByDoctorID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clinicDataServiceClient) UpdateScheduleFixed(ctx context.Context, in *UpdateScheduleFixedRequest, opts ...grpc.CallOption) (*ScheduleFixed, error) {
	out := new(ScheduleFixed)
	err := c.cc.Invoke(ctx, ClinicDataService_UpdateScheduleFixed_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clinicDataServiceClient) CreateScheduleOverride(ctx context.Context, in *CreateScheduleOverrideRequest, opts ...grpc.CallOption) (*ScheduleOverride, error) {
	out := new(ScheduleOverride)
	err := c.cc.Invoke(ctx, ClinicDataService_CreateScheduleOverride_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clinicDataServiceClient) GetOverrideByDoctorID(ctx context.Context, in *GetOverrideByDoctorIDRequest, opts ...grpc.CallOption) (*ListScheduleOverrideResponse, error) {
	out := new(ListScheduleOverrideResponse)
	err := c.cc.Invoke(ctx, ClinicDataService_GetOverrideByDoctorID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clinicDataServiceClient) UpdateScheduleOverride(ctx context.Context, in *UpdateScheduleOverrideRequest, opts ...grpc.CallOption) (*UpdateScheduleOverrideResponse, error) {
	out := new(UpdateScheduleOverrideResponse)
	err := c.cc.Invoke(ctx, ClinicDataService_UpdateScheduleOverride_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clinicDataServiceClient) DeleteScheduleOverride(ctx context.Context, in *DeleteScheduleOverrideRequest, opts ...grpc.CallOption) (*DeleteScheduleOverrideResponse, error) {
	out := new(DeleteScheduleOverrideResponse)
	err := c.cc.Invoke(ctx, ClinicDataService_DeleteScheduleOverride_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClinicDataServiceServer is the server API for ClinicDataService service.
// All implementations must embed UnimplementedClinicDataServiceServer
// for forward compatibility
type ClinicDataServiceServer interface {
	// PATIENT
	CreatePatient(context.Context, *CreatePatientRequest) (*Patient, error)
	GetPatientByID(context.Context, *GetPatientByIDRequest) (*Patient, error)
	GetAllPatients(context.Context, *Empty) (*ListPatientsResponse, error)
	UpdatePatient(context.Context, *UpdatePatientRequest) (*UpdatePatientResponse, error)
	DeletePatient(context.Context, *DeletePatientRequest) (*DeletePatientResponse, error)
	// DOCTOR
	CreateDoctor(context.Context, *CreateDoctorRequest) (*Doctor, error)
	GetDoctorByID(context.Context, *GetDoctorByIDRequest) (*Doctor, error)
	GetAllDoctors(context.Context, *Empty) (*ListDoctorsResponse, error)
	UpdateDoctor(context.Context, *UpdateDoctorRequest) (*UpdateDoctorResponse, error)
	DeleteDoctor(context.Context, *DeleteDoctorRequest) (*DeleteDoctorResponse, error)
	// SPECIALIZATION
	CreateSpecialization(context.Context, *CreateSpecializationRequest) (*Specialization, error)
	GetSpecializationByID(context.Context, *GetSpecializationByIDRequest) (*Specialization, error)
	GetAllSpecializations(context.Context, *Empty) (*ListSpecializationsResponse, error)
	UpdateSpecialization(context.Context, *UpdateSpecializationRequest) (*UpdateSpecializationResponse, error)
	DeleteSpecialization(context.Context, *DeleteSpecializationRequest) (*DeleteSpecializationResponse, error)
	// ROOM
	CreateRoom(context.Context, *CreateRoomRequest) (*Room, error)
	GetRoomByID(context.Context, *GetRoomByIDRequest) (*Room, error)
	GetAllRooms(context.Context, *Empty) (*ListRoomsResponse, error)
	// SCHEDULE FIXED
	CreateScheduleFixed(context.Context, *CreateScheduleFixedRequest) (*ScheduleFixed, error)
	GetFixedSchedulesByDoctorID(context.Context, *GetFixedSchedulesByDoctorIDRequest) (*ListScheduleFixedResponse, error)
	UpdateScheduleFixed(context.Context, *UpdateScheduleFixedRequest) (*ScheduleFixed, error)
	// SCHEDULE OVERRIDE
	CreateScheduleOverride(context.Context, *CreateScheduleOverrideRequest) (*ScheduleOverride, error)
	GetOverrideByDoctorID(context.Context, *GetOverrideByDoctorIDRequest) (*ListScheduleOverrideResponse, error)
	UpdateScheduleOverride(context.Context, *UpdateScheduleOverrideRequest) (*UpdateScheduleOverrideResponse, error)
	DeleteScheduleOverride(context.Context, *DeleteScheduleOverrideRequest) (*DeleteScheduleOverrideResponse, error)
	mustEmbedUnimplementedClinicDataServiceServer()
}

// UnimplementedClinicDataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClinicDataServiceServer struct {
}

func (UnimplementedClinicDataServiceServer) CreatePatient(context.Context, *CreatePatientRequest) (*Patient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePatient not implemented")
}
func (UnimplementedClinicDataServiceServer) GetPatientByID(context.Context, *GetPatientByIDRequest) (*Patient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPatientByID not implemented")
}
func (UnimplementedClinicDataServiceServer) GetAllPatients(context.Context, *Empty) (*ListPatientsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPatients not implemented")
}
func (UnimplementedClinicDataServiceServer) UpdatePatient(context.Context, *UpdatePatientRequest) (*UpdatePatientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePatient not implemented")
}
func (UnimplementedClinicDataServiceServer) DeletePatient(context.Context, *DeletePatientRequest) (*DeletePatientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePatient not implemented")
}
func (UnimplementedClinicDataServiceServer) CreateDoctor(context.Context, *CreateDoctorRequest) (*Doctor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDoctor not implemented")
}
func (UnimplementedClinicDataServiceServer) GetDoctorByID(context.Context, *GetDoctorByIDRequest) (*Doctor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDoctorByID not implemented")
}
func (UnimplementedClinicDataServiceServer) GetAllDoctors(context.Context, *Empty) (*ListDoctorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllDoctors not implemented")
}
func (UnimplementedClinicDataServiceServer) UpdateDoctor(context.Context, *UpdateDoctorRequest) (*UpdateDoctorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDoctor not implemented")
}
func (UnimplementedClinicDataServiceServer) DeleteDoctor(context.Context, *DeleteDoctorRequest) (*DeleteDoctorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDoctor not implemented")
}
func (UnimplementedClinicDataServiceServer) CreateSpecialization(context.Context, *CreateSpecializationRequest) (*Specialization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSpecialization not implemented")
}
func (UnimplementedClinicDataServiceServer) GetSpecializationByID(context.Context, *GetSpecializationByIDRequest) (*Specialization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpecializationByID not implemented")
}
func (UnimplementedClinicDataServiceServer) GetAllSpecializations(context.Context, *Empty) (*ListSpecializationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSpecializations not implemented")
}
func (UnimplementedClinicDataServiceServer) UpdateSpecialization(context.Context, *UpdateSpecializationRequest) (*UpdateSpecializationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSpecialization not implemented")
}
func (UnimplementedClinicDataServiceServer) DeleteSpecialization(context.Context, *DeleteSpecializationRequest) (*DeleteSpecializationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSpecialization not implemented")
}
func (UnimplementedClinicDataServiceServer) CreateRoom(context.Context, *CreateRoomRequest) (*Room, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoom not implemented")
}
func (UnimplementedClinicDataServiceServer) GetRoomByID(context.Context, *GetRoomByIDRequest) (*Room, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoomByID not implemented")
}
func (UnimplementedClinicDataServiceServer) GetAllRooms(context.Context, *Empty) (*ListRoomsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRooms not implemented")
}
func (UnimplementedClinicDataServiceServer) CreateScheduleFixed(context.Context, *CreateScheduleFixedRequest) (*ScheduleFixed, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateScheduleFixed not implemented")
}
func (UnimplementedClinicDataServiceServer) GetFixedSchedulesByDoctorID(context.Context, *GetFixedSchedulesByDoctorIDRequest) (*ListScheduleFixedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFixedSchedulesByDoctorID not implemented")
}
func (UnimplementedClinicDataServiceServer) UpdateScheduleFixed(context.Context, *UpdateScheduleFixedRequest) (*ScheduleFixed, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScheduleFixed not implemented")
}
func (UnimplementedClinicDataServiceServer) CreateScheduleOverride(context.Context, *CreateScheduleOverrideRequest) (*ScheduleOverride, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateScheduleOverride not implemented")
}
func (UnimplementedClinicDataServiceServer) GetOverrideByDoctorID(context.Context, *GetOverrideByDoctorIDRequest) (*ListScheduleOverrideResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOverrideByDoctorID not implemented")
}
func (UnimplementedClinicDataServiceServer) UpdateScheduleOverride(context.Context, *UpdateScheduleOverrideRequest) (*UpdateScheduleOverrideResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScheduleOverride not implemented")
}
func (UnimplementedClinicDataServiceServer) DeleteScheduleOverride(context.Context, *DeleteScheduleOverrideRequest) (*DeleteScheduleOverrideResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteScheduleOverride not implemented")
}
func (UnimplementedClinicDataServiceServer) mustEmbedUnimplementedClinicDataServiceServer() {}

// UnsafeClinicDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClinicDataServiceServer will
// result in compilation errors.
type UnsafeClinicDataServiceServer interface {
	mustEmbedUnimplementedClinicDataServiceServer()
}

func RegisterClinicDataServiceServer(s grpc.ServiceRegistrar, srv ClinicDataServiceServer) {
	s.RegisterService(&ClinicDataService_ServiceDesc, srv)
}

func _ClinicDataService_CreatePatient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePatientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClinicDataServiceServer).CreatePatient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClinicDataService_CreatePatient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClinicDataServiceServer).CreatePatient(ctx, req.(*CreatePatientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClinicDataService_GetPatientByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPatientByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClinicDataServiceServer).GetPatientByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClinicDataService_GetPatientByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClinicDataServiceServer).GetPatientByID(ctx, req.(*GetPatientByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClinicDataService_GetAllPatients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClinicDataServiceServer).GetAllPatients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClinicDataService_GetAllPatients_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClinicDataServiceServer).GetAllPatients(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClinicDataService_UpdatePatient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePatientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClinicDataServiceServer).UpdatePatient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClinicDataService_UpdatePatient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClinicDataServiceServer).UpdatePatient(ctx, req.(*UpdatePatientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClinicDataService_DeletePatient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePatientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClinicDataServiceServer).DeletePatient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClinicDataService_DeletePatient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClinicDataServiceServer).DeletePatient(ctx, req.(*DeletePatientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClinicDataService_CreateDoctor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDoctorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClinicDataServiceServer).CreateDoctor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClinicDataService_CreateDoctor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClinicDataServiceServer).CreateDoctor(ctx, req.(*CreateDoctorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClinicDataService_GetDoctorByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDoctorByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClinicDataServiceServer).GetDoctorByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClinicDataService_GetDoctorByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClinicDataServiceServer).GetDoctorByID(ctx, req.(*GetDoctorByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClinicDataService_GetAllDoctors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClinicDataServiceServer).GetAllDoctors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClinicDataService_GetAllDoctors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClinicDataServiceServer).GetAllDoctors(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClinicDataService_UpdateDoctor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDoctorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClinicDataServiceServer).UpdateDoctor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClinicDataService_UpdateDoctor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClinicDataServiceServer).UpdateDoctor(ctx, req.(*UpdateDoctorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClinicDataService_DeleteDoctor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDoctorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClinicDataServiceServer).DeleteDoctor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClinicDataService_DeleteDoctor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClinicDataServiceServer).DeleteDoctor(ctx, req.(*DeleteDoctorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClinicDataService_CreateSpecialization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSpecializationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClinicDataServiceServer).CreateSpecialization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClinicDataService_CreateSpecialization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClinicDataServiceServer).CreateSpecialization(ctx, req.(*CreateSpecializationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClinicDataService_GetSpecializationByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpecializationByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClinicDataServiceServer).GetSpecializationByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClinicDataService_GetSpecializationByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClinicDataServiceServer).GetSpecializationByID(ctx, req.(*GetSpecializationByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClinicDataService_GetAllSpecializations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClinicDataServiceServer).GetAllSpecializations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClinicDataService_GetAllSpecializations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClinicDataServiceServer).GetAllSpecializations(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClinicDataService_UpdateSpecialization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSpecializationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClinicDataServiceServer).UpdateSpecialization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClinicDataService_UpdateSpecialization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClinicDataServiceServer).UpdateSpecialization(ctx, req.(*UpdateSpecializationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClinicDataService_DeleteSpecialization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSpecializationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClinicDataServiceServer).DeleteSpecialization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClinicDataService_DeleteSpecialization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClinicDataServiceServer).DeleteSpecialization(ctx, req.(*DeleteSpecializationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClinicDataService_CreateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClinicDataServiceServer).CreateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClinicDataService_CreateRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClinicDataServiceServer).CreateRoom(ctx, req.(*CreateRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClinicDataService_GetRoomByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClinicDataServiceServer).GetRoomByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClinicDataService_GetRoomByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClinicDataServiceServer).GetRoomByID(ctx, req.(*GetRoomByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClinicDataService_GetAllRooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClinicDataServiceServer).GetAllRooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClinicDataService_GetAllRooms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClinicDataServiceServer).GetAllRooms(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClinicDataService_CreateScheduleFixed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateScheduleFixedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClinicDataServiceServer).CreateScheduleFixed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClinicDataService_CreateScheduleFixed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClinicDataServiceServer).CreateScheduleFixed(ctx, req.(*CreateScheduleFixedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClinicDataService_GetFixedSchedulesByDoctorID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFixedSchedulesByDoctorIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClinicDataServiceServer).GetFixedSchedulesByDoctorID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClinicDataService_GetFixedSchedulesByDoctorID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClinicDataServiceServer).GetFixedSchedulesByDoctorID(ctx, req.(*GetFixedSchedulesByDoctorIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClinicDataService_UpdateScheduleFixed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateScheduleFixedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClinicDataServiceServer).UpdateScheduleFixed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClinicDataService_UpdateScheduleFixed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClinicDataServiceServer).UpdateScheduleFixed(ctx, req.(*UpdateScheduleFixedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClinicDataService_CreateScheduleOverride_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateScheduleOverrideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClinicDataServiceServer).CreateScheduleOverride(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClinicDataService_CreateScheduleOverride_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClinicDataServiceServer).CreateScheduleOverride(ctx, req.(*CreateScheduleOverrideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClinicDataService_GetOverrideByDoctorID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOverrideByDoctorIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClinicDataServiceServer).GetOverrideByDoctorID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClinicDataService_GetOverrideByDoctorID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClinicDataServiceServer).GetOverrideByDoctorID(ctx, req.(*GetOverrideByDoctorIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClinicDataService_UpdateScheduleOverride_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateScheduleOverrideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClinicDataServiceServer).UpdateScheduleOverride(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClinicDataService_UpdateScheduleOverride_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClinicDataServiceServer).UpdateScheduleOverride(ctx, req.(*UpdateScheduleOverrideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClinicDataService_DeleteScheduleOverride_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteScheduleOverrideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClinicDataServiceServer).DeleteScheduleOverride(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClinicDataService_DeleteScheduleOverride_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClinicDataServiceServer).DeleteScheduleOverride(ctx, req.(*DeleteScheduleOverrideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClinicDataService_ServiceDesc is the grpc.ServiceDesc for ClinicDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClinicDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clinicdata.ClinicDataService",
	HandlerType: (*ClinicDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePatient",
			Handler:    _ClinicDataService_CreatePatient_Handler,
		},
		{
			MethodName: "GetPatientByID",
			Handler:    _ClinicDataService_GetPatientByID_Handler,
		},
		{
			MethodName: "GetAllPatients",
			Handler:    _ClinicDataService_GetAllPatients_Handler,
		},
		{
			MethodName: "UpdatePatient",
			Handler:    _ClinicDataService_UpdatePatient_Handler,
		},
		{
			MethodName: "DeletePatient",
			Handler:    _ClinicDataService_DeletePatient_Handler,
		},
		{
			MethodName: "CreateDoctor",
			Handler:    _ClinicDataService_CreateDoctor_Handler,
		},
		{
			MethodName: "GetDoctorByID",
			Handler:    _ClinicDataService_GetDoctorByID_Handler,
		},
		{
			MethodName: "GetAllDoctors",
			Handler:    _ClinicDataService_GetAllDoctors_Handler,
		},
		{
			MethodName: "UpdateDoctor",
			Handler:    _ClinicDataService_UpdateDoctor_Handler,
		},
		{
			MethodName: "DeleteDoctor",
			Handler:    _ClinicDataService_DeleteDoctor_Handler,
		},
		{
			MethodName: "CreateSpecialization",
			Handler:    _ClinicDataService_CreateSpecialization_Handler,
		},
		{
			MethodName: "GetSpecializationByID",
			Handler:    _ClinicDataService_GetSpecializationByID_Handler,
		},
		{
			MethodName: "GetAllSpecializations",
			Handler:    _ClinicDataService_GetAllSpecializations_Handler,
		},
		{
			MethodName: "UpdateSpecialization",
			Handler:    _ClinicDataService_UpdateSpecialization_Handler,
		},
		{
			MethodName: "DeleteSpecialization",
			Handler:    _ClinicDataService_DeleteSpecialization_Handler,
		},
		{
			MethodName: "CreateRoom",
			Handler:    _ClinicDataService_CreateRoom_Handler,
		},
		{
			MethodName: "GetRoomByID",
			Handler:    _ClinicDataService_GetRoomByID_Handler,
		},
		{
			MethodName: "GetAllRooms",
			Handler:    _ClinicDataService_GetAllRooms_Handler,
		},
		{
			MethodName: "CreateScheduleFixed",
			Handler:    _ClinicDataService_CreateScheduleFixed_Handler,
		},
		{
			MethodName: "GetFixedSchedulesByDoctorID",
			Handler:    _ClinicDataService_GetFixedSchedulesByDoctorID_Handler,
		},
		{
			MethodName: "UpdateScheduleFixed",
			Handler:    _ClinicDataService_UpdateScheduleFixed_Handler,
		},
		{
			MethodName: "CreateScheduleOverride",
			Handler:    _ClinicDataService_CreateScheduleOverride_Handler,
		},
		{
			MethodName: "GetOverrideByDoctorID",
			Handler:    _ClinicDataService_GetOverrideByDoctorID_Handler,
		},
		{
			MethodName: "UpdateScheduleOverride",
			Handler:    _ClinicDataService_UpdateScheduleOverride_Handler,
		},
		{
			MethodName: "DeleteScheduleOverride",
			Handler:    _ClinicDataService_DeleteScheduleOverride_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/clinic_data.proto",
}
