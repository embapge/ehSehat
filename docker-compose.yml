version: "3.8"

services:
  mysql:
    image: mysql:latest
    container_name: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./auth-service/auth.sql:/docker-entrypoint-initdb.d/1-auth.sql:ro
      - ./appointment-queue-service/query.sql:/docker-entrypoint-initdb.d/2-appointment.sql:ro
      - ./consultation-service/mysql_payment.sql:/docker-entrypoint-initdb.d/3-payment.sql:ro
      - ./notification-service/teman_sehat_notifications.sql:/docker-entrypoint-initdb.d/4-notification.sql:ro

  mongo:
    image: mongo:latest
    container_name: mongo
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
      # Add init scripts if needed for mongo

  postgres:
    image: postgres:latest
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123456789
      POSTGRES_DB: teman_sehat_masters
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./clinic-data-service/migration/init_schema.sql:/docker-entrypoint-initdb.d/init_schema.sql:ro

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

  auth-service:
    build:
      context: .
      dockerfile: auth-service/Dockerfile
    container_name: auth-service
    env_file:
      - ./auth-service/.env
    depends_on:
      - mysql
      - rabbitmq
    ports:
      - "50051:50051"
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:50051"]
      interval: 10s
      timeout: 5s
      retries: 10

  appointment-queue-service:
    build:
      context: .
      dockerfile: appointment-queue-service/Dockerfile
    container_name: appointment-queue-service
    env_file:
      - ./appointment-queue-service/.env
    depends_on:
      - mysql
      - rabbitmq
    ports:
      - "8080:8080"
      - "50053:50053"
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 10s
      timeout: 5s
      retries: 10

  clinic-data-service:
    build:
      context: .
      dockerfile: clinic-data-service/Dockerfile
    container_name: clinic-data-service
    env_file:
      - ./clinic-data-service/.env
    depends_on:
      - postgres
      - rabbitmq
    ports:
      - "50052:50052"
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:50052"]
      interval: 10s
      timeout: 5s
      retries: 10

  consultation-service:
    build:
      context: .
      dockerfile: consultation-service/Dockerfile
    container_name: consultation-service
    env_file:
      - ./consultation-service/.env
    depends_on:
      - mysql
      - rabbitmq
    ports:
      - "50054:50054"
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:50054"]
      interval: 10s
      timeout: 5s
      retries: 10

  notification-service:
    build:
      context: .
      dockerfile: notification-service/Dockerfile
    container_name: notification-service
    env_file:
      - ./notification-service/.env
    depends_on:
      - mysql
      - rabbitmq
    ports:
      - "50055:50055"
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:50055"]
      interval: 10s
      timeout: 5s
      retries: 10
  gateway-service:
    build:
      context: .
      dockerfile: gateway-service/Dockerfile
    container_name: gateway-service
    env_file:
      - ./gateway-service/.env
    depends_on:
      - auth-service
      - appointment-queue-service
      - clinic-data-service
      - consultation-service
      - notification-service
    ports:
      - "8000:8000"
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 10s
      timeout: 5s
      retries: 10

volumes:
  mysql_data:
  mongo_data:
  postgres_data:
  rabbitmq_data:
