name: Deploy Go Microservices to GCP VM

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      PROJECT_ID: final-project-bang-bjb
      REGISTRY: asia-southeast2-docker.pkg.dev/final-project-bang-bjb/docker-asia-v2
      VM_HOST: ${{ secrets.VM_HOST }}
      VM_USER: ${{ secrets.VM_USER }}
      VM_SSH_KEY: ${{ secrets.VM_SSH_KEY }}
      GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker to use gcloud as a credential helper
        run: |
          gcloud auth configure-docker asia-southeast2-docker.pkg.dev --quiet

      # Build & Push Auth Service
      - name: Build & Push Auth Service
        run: |
          docker buildx build --platform linux/amd64,linux/arm64 \
            -t ${{ env.REGISTRY }}/ehsehat-auth-service:latest ./auth-service --push

      # Build & Push Clinic Data Service
      - name: Build & Push Clinic Data Service
        run: |
          docker buildx build --platform linux/amd64,linux/arm64 \
            -t ${{ env.REGISTRY }}/ehsehat-clinic-data-service:latest ./clinic-data-service --push

      # Build & Push Appointment Queue Service
      - name: Build & Push Appointment Queue Service
        run: |
          docker buildx build --platform linux/amd64,linux/arm64 \
            -t ${{ env.REGISTRY }}/ehsehat-appointment-queue-service:latest ./appointment-queue-service --push

      # Build & Push Consultation Service
      - name: Build & Push Consultation Service
        run: |
          docker buildx build --platform linux/amd64,linux/arm64 \
            -t ${{ env.REGISTRY }}/ehsehat-consultation-service:latest ./consultation-service --push

      # Build & Push Notification Service
      - name: Build & Push Notification Service
        run: |
          docker buildx build --platform linux/amd64,linux/arm64 \
            -t ${{ env.REGISTRY }}/ehsehat-notification-service:latest ./notification-service --push

      # Build & Push Gateway Service
      - name: Build & Push Gateway Service
        run: |
          docker buildx build --platform linux/amd64,linux/arm64 \
            -t ${{ env.REGISTRY }}/ehsehat-gateway-service:latest ./gateway-service --push

      # Deploy to VM via SSH
      - name: Deploy to GCP VM via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.VM_HOST }}
          username: ${{ env.VM_USER }}
          key: ${{ env.VM_SSH_KEY }}
          script: |
            # Login to Artifact Registry (gunakan root registry juga)
            gcloud auth configure-docker asia-southeast2-docker.pkg.dev --quiet

            # Pull latest images
            docker pull ${{ env.REGISTRY }}/ehsehat-auth-service:latest
            docker pull ${{ env.REGISTRY }}/ehsehat-clinic-data-service:latest
            docker pull ${{ env.REGISTRY }}/ehsehat-appointment-queue-service:latest
            docker pull ${{ env.REGISTRY }}/ehsehat-consultation-service:latest
            docker pull ${{ env.REGISTRY }}/ehsehat-notification-service:latest
            docker pull ${{ env.REGISTRY }}/ehsehat-gateway-service:latest

            # Stop and remove existing containers
            docker rm -f ehsehat-auth-service || true
            docker rm -f ehsehat-clinic-data-service || true
            docker rm -f ehsehat-appointment-queue-service || true
            docker rm -f ehsehat-consultation-service || true
            docker rm -f ehsehat-notification-service || true
            docker rm -f ehsehat-gateway-service || true

            # Start containers with docker-compose
            docker-compose up -d

            # Prune unused images
            docker image prune -af || true
