// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: proto/consultation/consultation.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ConsultationService_CreateConsultation_FullMethodName   = "/consultation.ConsultationService/CreateConsultation"
	ConsultationService_FindByIDConsultation_FullMethodName = "/consultation.ConsultationService/FindByIDConsultation"
	ConsultationService_UpdateConsultation_FullMethodName   = "/consultation.ConsultationService/UpdateConsultation"
)

// ConsultationServiceClient is the client API for ConsultationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConsultationServiceClient interface {
	// Create a new consultation
	CreateConsultation(ctx context.Context, in *ConsultationRequest, opts ...grpc.CallOption) (*ConsultationResponse, error)
	// Get a consultation by ID
	FindByIDConsultation(ctx context.Context, in *ConsultationIDRequest, opts ...grpc.CallOption) (*ConsultationResponse, error)
	// Update an existing consultation
	UpdateConsultation(ctx context.Context, in *ConsultationRequest, opts ...grpc.CallOption) (*ConsultationResponse, error)
}

type consultationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConsultationServiceClient(cc grpc.ClientConnInterface) ConsultationServiceClient {
	return &consultationServiceClient{cc}
}

func (c *consultationServiceClient) CreateConsultation(ctx context.Context, in *ConsultationRequest, opts ...grpc.CallOption) (*ConsultationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConsultationResponse)
	err := c.cc.Invoke(ctx, ConsultationService_CreateConsultation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consultationServiceClient) FindByIDConsultation(ctx context.Context, in *ConsultationIDRequest, opts ...grpc.CallOption) (*ConsultationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConsultationResponse)
	err := c.cc.Invoke(ctx, ConsultationService_FindByIDConsultation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consultationServiceClient) UpdateConsultation(ctx context.Context, in *ConsultationRequest, opts ...grpc.CallOption) (*ConsultationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConsultationResponse)
	err := c.cc.Invoke(ctx, ConsultationService_UpdateConsultation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsultationServiceServer is the server API for ConsultationService service.
// All implementations must embed UnimplementedConsultationServiceServer
// for forward compatibility.
type ConsultationServiceServer interface {
	// Create a new consultation
	CreateConsultation(context.Context, *ConsultationRequest) (*ConsultationResponse, error)
	// Get a consultation by ID
	FindByIDConsultation(context.Context, *ConsultationIDRequest) (*ConsultationResponse, error)
	// Update an existing consultation
	UpdateConsultation(context.Context, *ConsultationRequest) (*ConsultationResponse, error)
	mustEmbedUnimplementedConsultationServiceServer()
}

// UnimplementedConsultationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConsultationServiceServer struct{}

func (UnimplementedConsultationServiceServer) CreateConsultation(context.Context, *ConsultationRequest) (*ConsultationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConsultation not implemented")
}
func (UnimplementedConsultationServiceServer) FindByIDConsultation(context.Context, *ConsultationIDRequest) (*ConsultationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByIDConsultation not implemented")
}
func (UnimplementedConsultationServiceServer) UpdateConsultation(context.Context, *ConsultationRequest) (*ConsultationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConsultation not implemented")
}
func (UnimplementedConsultationServiceServer) mustEmbedUnimplementedConsultationServiceServer() {}
func (UnimplementedConsultationServiceServer) testEmbeddedByValue()                             {}

// UnsafeConsultationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsultationServiceServer will
// result in compilation errors.
type UnsafeConsultationServiceServer interface {
	mustEmbedUnimplementedConsultationServiceServer()
}

func RegisterConsultationServiceServer(s grpc.ServiceRegistrar, srv ConsultationServiceServer) {
	// If the following call pancis, it indicates UnimplementedConsultationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ConsultationService_ServiceDesc, srv)
}

func _ConsultationService_CreateConsultation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsultationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsultationServiceServer).CreateConsultation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsultationService_CreateConsultation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsultationServiceServer).CreateConsultation(ctx, req.(*ConsultationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsultationService_FindByIDConsultation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsultationIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsultationServiceServer).FindByIDConsultation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsultationService_FindByIDConsultation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsultationServiceServer).FindByIDConsultation(ctx, req.(*ConsultationIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsultationService_UpdateConsultation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsultationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsultationServiceServer).UpdateConsultation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsultationService_UpdateConsultation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsultationServiceServer).UpdateConsultation(ctx, req.(*ConsultationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConsultationService_ServiceDesc is the grpc.ServiceDesc for ConsultationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConsultationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "consultation.ConsultationService",
	HandlerType: (*ConsultationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateConsultation",
			Handler:    _ConsultationService_CreateConsultation_Handler,
		},
		{
			MethodName: "FindByIDConsultation",
			Handler:    _ConsultationService_FindByIDConsultation_Handler,
		},
		{
			MethodName: "UpdateConsultation",
			Handler:    _ConsultationService_UpdateConsultation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/consultation/consultation.proto",
}
